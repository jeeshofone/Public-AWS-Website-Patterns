AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for setting up a fully private S3 bucket with a CloudFront distribution with OAC
Parameters:
  DomainName:
    Type: String
    Description: The domain name for the CloudFront distribution.
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket to create and use.
  HostedZoneId:
    Type: String
    Description: The ID of the hosted zone in Route 53 where the domain name is registered.

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET']
            AllowedOrigins: [ !Sub "https://${DomainName}" ]
            ExposedHeaders: ['Date']
            MaxAge: 3600

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "${S3Bucket.Arn}/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Sub "${S3Bucket.Arn}/*"
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
          - Action: s3:ListBucket
            Effect: Allow
            Resource: !Sub "${S3Bucket.Arn}"
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
          - Action: s3:DeleteObject
            Effect: Allow
            Resource: !Sub "${S3Bucket.Arn}/*"
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
          
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'OAC Distribution for ${DomainName}'
        Enabled: true
        HttpVersion: 'http2and3'
        Aliases: [ !Ref DomainName ]
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: 'TLSv1.2_2021'

  HelloLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))
              s3 = boto3.client('s3')
              
              if event['RequestType'] == 'Delete':
                  bucket_name = event.get('ResourceProperties', {}).get('BucketName')
                  print(f"Delete event received for resource {event.get('PhysicalResourceId')}. Starting bucket emptying process.")
                  
                  if not bucket_name:
                      print("Error: BucketName not found in event.")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": "Missing bucket name during delete"}, event['PhysicalResourceId'])
                      return

                  # Attempt to list and delete all objects in the bucket
                  try:
                      response = s3.list_objects_v2(Bucket=bucket_name)
                      if 'Contents' in response:
                          for obj in response['Contents']:
                              s3.delete_object(Bucket=bucket_name, Key=obj['Key'])
                          print("Bucket emptied successfully.")
                      else:
                          print("Bucket is already empty.")

                      # After successfully emptying the bucket, send a success response.
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])
                  
                  except Exception as e:
                      print(f"Error emptying the bucket: {str(e)}")
                      # If errors occur, send a failed response.
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)}, event['PhysicalResourceId'])
                  return

              if event["RequestType"] == "Create":
                  bucket_name = event.get("ResourceProperties", {}).get("BucketName")
                  
                  if not bucket_name:
                      print("Error: BucketName not found in event.")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": "Missing bucket name"})
                      return

                  # Create object in S3 bucket for "Create" events.
                  try:
                      response = s3.put_object(
                          Bucket=bucket_name,
                          Key="index.html",
                          ContentType="text/html",
                          Body="<html><head><title>Hello World</title></head><body><p>Hello World from <a href='https://123cloud.st'>123cloud.st</a>!</p></body></html>"
                      )
                      print("PutObject response:", response)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={"Status": "Success"})
                  
                  except Exception as e:
                      print("Error in s3.putObject:", str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})

  S3BucketSetup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt HelloLambdaFunction.Arn
      BucketName: !Ref S3Bucket
    DependsOn: [HelloLambdaFunction, S3Bucket, S3BucketPolicy, CloudFrontDistribution, LambdaExecutionRole]

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:DeleteObject'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Effect: Allow
                Action: 'cloudformation:SignalResource'
                Resource: '*'

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  
  Route53RecordSet2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  BucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref S3Bucket
  CloudFrontDistribution:
    Description: "CloudFront distribution DNS name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  LambdaFunction:
    Description: "Lambda function ARN"
    Value: !GetAtt HelloLambdaFunction.Arn

