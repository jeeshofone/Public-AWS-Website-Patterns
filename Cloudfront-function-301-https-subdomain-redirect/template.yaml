AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for root domain to subdomain redirection using Lambda@Edge'

Parameters:
  SourceDomain:
    Type: String
    Description: 'The domain name that users will initially access'
  DestinationDomain:
    Type: String
    Description: 'The domain name to which users will be redirected'
  HostedZoneId:
    Type: String
    Description: 'The ID of the hosted zone containing the DNS records for the source domain'
  CreateDNSRecords:
    Type: String
    AllowedValues: ['yes', 'no']
    Default: 'yes'
    Description: 'Specifies whether to create DNS records in Route 53'
  ACMCertificateArn:
    Type: String
    Default: ''
    Description: 'The ARN of an existing ACM certificate. If not provided, one may be created'
  CreateACMCertificate:
    Type: String
    AllowedValues: ['yes', 'no']
    Default: 'yes'
    Description: 'Specifies whether to create a new ACM certificate if one is not provided'

Conditions:
  CreateDNSRecordsCondition: !Equals [!Ref CreateDNSRecords, 'yes']
  UseExistingCertificateCondition: !Not [!Equals [!Ref ACMCertificateArn, '']]
  CreateNewCertificateCondition: !And
    - !Equals [!Ref CreateACMCertificate, 'yes']
    - !Not [Condition: UseExistingCertificateCondition]

Resources:
  RedirectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          'use strict';
          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const response = {
                  status: '301',
                  statusDescription: 'Moved Permanently',
                  headers: {
                      location: [{
                          key: 'Location',
                          value: 'https://${DestinationDomain}' + request.uri
                      }]
                  }
              };
              callback(null, response);
          };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Timeout: 5
      MemorySize: 128

  RedirectFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref RedirectFunction

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: 'http2and3'
        Comment: !Sub 'Redirect function distribution for ${SourceDomain} to ${DestinationDomain}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !GetAtt RedirectFunctionVersion.FunctionArn
          TargetOriginId: 'dummy'
          ViewerProtocolPolicy: allow-all
        Origins:
          - Id: 'dummy'
            DomainName: !GetAtt DummyRedirectBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        ViewerCertificate:
          AcmCertificateArn: !If [UseExistingCertificateCondition, !Ref ACMCertificateArn, !Ref 'ACMCertificateResource']
          SslSupportMethod: sni-only
          MinimumProtocolVersion: 'TLSv1.2_2021'
        PriceClass: PriceClass_All
        Aliases:
          - !Ref SourceDomain

  ACMCertificateResource:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateNewCertificateCondition
    Properties:
      DomainName: !Ref SourceDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref SourceDomain
          HostedZoneId: !Ref HostedZoneId

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateDNSRecordsCondition
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref SourceDomain
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistribution.DomainName
        - Name: !Ref SourceDomain
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistribution.DomainName

  DummyRedirectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${SourceDomain}-redirect-bucket-${AWS::AccountId}
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration: 
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET']
            AllowedOrigins:
              - !Sub https://${SourceDomain}
            ExposedHeaders: ['Date']
            MaxAge: 3600

  DummyRedirectBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DummyRedirectBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub ${DummyRedirectBucket.Arn}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
  
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
